# Initializes a SymbolTable with Gramola's builtin types, methods and functions.
#
# NOTES:
# - These are just prototypes for the symbol table, no implementations needed


class object():

	def object __init__(object obj):
		pass


class void():
	pass


class int(object):

	def int __init__(object obj):
		# Integer.valueOf(x.toString())
		pass


class bool(int):

	def bool __init__(object obj):
		# Boolean.valueOf(x != 0 ? "true" : "false")
		pass


class float(object):

	def float __init__(object obj):
		# Float.valueOf(x.toString())
		pass


class str(object):

	def str __init__(object obj):
		# String.valueOf(x)
		pass

	def str copy():
		# String.clone
		return ''

	def bool endswith(str s):
		# String.endsWith
		return bool('')

	def int find(str s):
		# String.indexOf
		return 0

	def str lower():
		# String.toLowerCase
		return ''

	def str replace(str s, str t):
		# String.replace
		return ''

	def int rfind(str s):
		# String.lastIndexOf
		return 0

	def list<str> split(str s):
		# String.split
		return []

	def bool startswith(str s):
		# String.startsWith
		return False

	def str strip():
		# String.trim
		return ''

	def str substring(int start, int end):
		# String.substring
		return ''

	def str upper():
		# String.toUpperCase
		return ''


class list<object>(object):

	def list<object> __init__(list<object> obj):
		# ArrayList<Object>
		pass

	def bool append(object obj):
		# ArrayList<Object>.add
		return False

	def bool contains(object obj):
		# ArrayList<Object>.contains
		return False

	def list<object> copy():
		# ArrayList<Object>.clone
		return []

	def bool extend(list<object> l):
		# ArrayList<Object>.addAll
		return False

	def int index(object obj):
		# ArrayList<Object>.indexOf
		return 0

	def void insert(int pos, object obj):
		# ArrayList<Object>.add
		pass

	def object pop(int pos):
		# ArrayList<Object>.remove
		return ''

	def bool remove(object obj):
		# ArrayList<Object>.remove
		return False

	def int size():
		# ArrayList<Object>.size()
		return 0


class set<object>(object):

	def set<object> __init__(list<object> obj):
		# HashSet<Object>
		pass

	def bool add(object obj):
		# HashSet<Object>.add
		return False

	def bool contains(object obj):
		# HashSet<Object>.contains
		return False

	def set<object> copy():
		# HashSet<Object>.clone
		return set<object>([])

	def bool difference_update(set<object> s):
		# HashSet<Object>.removeAll
		return False

	def bool intersection_update(set<object> s):
		# HashSet<Object>.retainAll
		return False

	def bool isempty():
		return False

	def bool issuperset(set<object> s):
		# HashSet<Object>.containsAll
		return False

	def bool remove(object obj):
		# HashSet<Object>.remove
		return False

	def int size():
		# HashSet<Object>.size()
		return 0

	def bool update(set<object> s):
		# HashSet<Object>.addAll
		return False


class dict<str,object>(object):

	def dict<str,object> __init__(dict<str,object> obj):
		# HashMap<String,Object>
		pass

	def dict<str,object> copy():
		# HashMap<String,Object>.clone
		return {}

	def object get(str key):
		# HashMap<String,Object>.get
		return ''

	def bool has_key(str key):
		# HashMap<String,Object>.containsKey
		return False

	def set<object> items():
		# HashMap<String,Object>.entrySet
		return set<object>([])

	def set<str> keys():
		# HashMap<String,Object>.keySet
		return set<object>([])

	def object pop(str key):
		# HashMap<String,Object>.remove
		return ''

	def object set(str key, object value):
		# HashMap<String,Object>.put
		return value

	def int size():
		# HashMap<String,Object>.size()
		return 0

	def void update(dict<str,object> d):
		# HashMap<String,Object>.putAll
		pass

	def set<object> values():
		# HashMap<String,Object>.values
		return set<object>([])


class Graph(object):

	def Graph __init__():
		pass

	def int get_id():
		return 0

	def Node node(dict<str,str> attr_dict):
		return Node({})

	def Edge edge(Node start, Node end, dict<str,str> attr_dict):
		return Edge(start, end, attr_dict)

	def void add_node(Node n):
		pass

	def Node get_node(str variable, str value):
		return Node({})

	def NodeSet get_nodes(str variable, str value):
		return NodeSet([])

	def Node get_node_by_id(int node_id):
		return Node({})

	def list<Node> get_all_nodes():
		return []

	def void add_edge(Edge e):
		pass

	def list<Edge> get_all_edges():
		return []

	def list<Edge> get_shortest_path(Node start, Node end, list<str> vars, list<str> vals):
		return []

	# def list<object> get_paths(Node start, Node end, dict<str,object> attr_map):
	# 	# This returns a list of lists
	# 	return []


class Node(object):

	def Node __init__(dict<str,str> attr_map):
		pass

	def void set_id(int node_id):
		pass

	def int get_id():
		return 0

	def str get_attribute(str attr):
		return ''

	def bool has_attribute(str attr):
		return True

	def void set_attribute(str variable, str value):
		pass

	def set<str> get_attributes():
		return set<str>([])

	def dict<str,str> get_attribute_dict():
		return {}

	# def void set_in_edge(Edge e):
	#	pass

	# def void set_out_edge(Edge e):
	#	pass

	def EdgeSet out_edges():
		return EdgeSet([])

	def EdgeSet in_edges():
		return EdgeSet([])

	def NodeSet in_neighbors():
		return NodeSet([])

	def NodeSet out_neighbors():
		return NodeSet([])

	def void update(str variable, str new_value):
		pass


class Edge(object):

	def Edge __init__(Node start, Node end, dict<str,str> var_map):
		pass

	# def void set_id(int edge_id):
	# 	pass

	def int get_id():
		return 0

	def Node in_node():
		return Node({})

	def Node out_node():
		return Node({})

	def set<str> get_attributes():
		return set<str>([])

	def dict<str,str> get_attribute_dict():
		return {}

	def str get_attribute(str variable):
		return ''

	def bool has_attribute(str attr):
		return True

	def void set_attribute(str variable, str value):
		pass

	# def void add_parents(Edge path_parent):
	# 	pass

	# def set<Edge> get_parents():
	# 	return set([])


class NodeSet(set<Node>):

	def set<str> select(str attr):
		return set<str>([])

	def NodeSet filter(str variable, str value):
		return NodeSet([])

	def EdgeSet out_edges():
		return EdgeSet([])


class EdgeSet(set<Edge>):

	def EdgeSet filter(str variable, str value):
		return EdgeSet([])

	def NodeSet out_nodes():
		return NodeSet([])


class __builtins(object):

	bool False = bool(0)
	bool True = bool(1)

	def Graph load(str path):
		return Graph()

	def Graph get_fb(str token):
		return Graph()

	def Graph get_fb_friend(str token):
		return Graph()

	def Graph get_fb_feed(str token):
		return Graph()

	def Graph get_fb_page(str token):
		return Graph()

	def void dump(Graph g, str path):
		pass

	def void draw(Graph g, str node_attr, str edge_attr):
		pass

	def set<str> union(set<str> lhs, set<str> rhs):
		return set<object>([])

	def bool isinstance(object obj, str type_name):
		return False
