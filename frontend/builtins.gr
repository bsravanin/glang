# Initializes a SymbolTable with Gramola's builtin types, methods and functions.
#
# NOTE: return type for init's are ignored, but must be present anyway

# TODO: what name to use for the constructor? init? __init__? type name?
# TODO: finish adding builtins
# TODO: include special functions like __len__, then replace top-level builtins
# with those calls? Also, subscriptions, operators.
# TODO: do we need a None type, i.e., an object with no value at all
# (not even bool)?


class object():

	def void __init__(object obj):
		pass

	def str __str__():
		pass


class void():
	pass


class int(object):

	def void __init__(object obj):
		# Integer.parseInt(x.toString()) ???
		pass


class bool(int):

	def void __init__(object obj):
		# TODO: not sure how to cast to boolean in Java
		pass


bool False = bool(0)
bool True = bool(1)


class float(object):

	def void __init__(object obj):
		# Float.parseFloat(x.toString()) ???
		pass


class str(object):

	def void __init__(object obj):
		# String.valueOf
		pass

	def int __len__():
		# String.length
		pass

	def str copy():
		# String.clone
		pass

	def bool ends_with(str s):
		# String.endsWith
		pass

	def list find(str s):
		# String.indexOf
		pass

	def str lower():
		# String.toLowerCase
		pass

	def str replace(str s, str t):
		# String.replace
		pass

	def int rfind(str s):
		# String.lastIndexOf
		pass

	def list split(str s):
		# String.split
		pass

	def bool startswith(str s):
		# String.startswith
		pass

	def str strip():
		# String.trim
		pass

	def str substring(int start, int end):
		# String.substring
		pass

	def str upper():
		# String.toUpperCase
		pass


class list(object):

	def void __init__(object obj):
		# ArrayList<Object>
		pass

	def bool __contains__(object obj):
		# ArrayList<Object>.contains
		pass

	def int __len__():
		# ArrayList<Object>.size
		pass

	def bool append(object obj):
		# ArrayList<Object>.add
		pass

	def void clear():
		# ArrayList<Object>.clear
		pass

	def list clone():
		# ArrayList<Object>.clone
		pass

	def bool extend(list l):
		# ArrayList<Object>.addAll
		pass

	def int index(object obj):
		# ArrayList<Object>.indexOf
		pass

	def void insert(int pos, object obj):
		# ArrayList<Object>.add
		pass

	def object pop(int pos):
		# ArrayList<Object>.remove
		pass

	def bool remove(object obj):
		# ArrayList<Object>.remove
		pass

	def void reverse():
		# Collections.reverse
		pass

	def void sort():
		# Collections.sort
		pass


class set(object):

	def void __init__(object obj):
		# HashSet<Object>
		pass

	def bool __contains__(object obj):
		# HashSet<Object>.contains
		pass

	def int __len__():
		# HashSet<Object>.size
		pass

	def bool add(object obj):
		# HashSet<Object>.add
		pass

	def void clear():
		# HashSet<Object>.clear
		pass

	def set copy():
		# HashSet<Object>.clone
		pass

	def bool difference_update(set s):
		# HashSet<Object>.removeAll
		pass

	def bool intersection_update(set s):
		# HashSet<Object>.retainAll
		pass

	def bool isEmpty():
		pass

	def bool issuperset(set s):
		# HashSet<Object>.containsAll
		pass

	def bool remove(object obj):
		# HashSet<Object>.remove
		pass

	def bool update(set s):
		# HashSet<Object>.addAll
		pass


class dict(object):

	def void __init__(object obj):
		# HashMap<Object,Object>
		pass

	def int __len__():
		# HashMap<Object,Object>.size
		pass

	def bool clear():
		# HashMap<Object,Object>.clear
		pass

	def dict copy():
		# HashMap<Object,Object>.clone
		pass

	def object get(object key):
		# HashMap<Object,Object>.get
		pass

	def bool has_key(object key):
		# HashMap<Object,Object>.containsKey
		pass

	def set items():
		# HashMap<Object,Object>.entrySet
		pass

	def set keys():
		# HashMap<Object,Object>.keySet
		pass

	def object pop(object key):
		# HashMap<Object,Object>.remove
		pass

	def void update(dict d):
		# HashMap<Object,Object>.putAll
		pass

	def set values():
		# HashMap<Object,Object>.values
		pass


class Graph(object):

	def void __init__():
		pass

	# TODO: Java returns this as long. Should we translate all ints to long?
	def int getGraphId():
		pass

	def Node Node(dict attr_dict):
		pass

	def Edge Edge(Node start, Node end, dict attr_dict):
		pass

	def void addNode(Node n):
		pass

	def Node getNode(str variable, object value):
		pass

	def NodeSet getNodes(str variable, object value):
		pass

	def Node getNodeById(int node_id):
		pass

	def list getAllNodes():
		pass

	def void addEdge(Edge e):
		pass

	def list getAllEdges():
		pass

	# TODO: fix this
	def list getShortestPath(Node start, Node end, list alist):
		pass

	# TODO: fix this
	def list getPaths(Node start, Node end, list alist):
		pass

	def str __str__():
		pass


class Node(object):

	def void __init__(dict attr_map):
		pass

	def void setId(int node_id):
		pass

	def int getId():
		pass

	def object getVariableValue(str variable):
		pass

	def void setVariableValue(str variable, object value):
		pass

	def set getVariables():
		pass

	def dict getVariableMap():
		pass

	def void setInE(Edge e):
		pass

	def void setOutE(Edge e):
		pass

	def EdgeSet outE():
		pass

	def EdgeSet inE():
		pass

	# TODO: uncomment this once "in" operator is no longer supported
	#def NodeSet in():
	#	pass

	def NodeSet out():
		pass

	def void update(str variable, object new_value):
		pass

	def str __str__():
		pass

	def bool __eq__(object obj):
		pass


class Edge(object):

	def void __init__(Node start, Node end, dict var_map, int edge_id):
		pass

	def void setId(int edge_id):
		pass

	def int getId():
		pass

	def Node inV():
		pass

	def Node outV():
		pass

	def set getVariables():
		pass

	def dict getVariableMap():
		pass

	def object getVariableValue(str variable):
		pass

	def void setVariableValue(str variable, object value):
		pass

	def void addParents(Edge path_parent):
		pass

	def dict getParents():
		pass

	def str __str__():
		pass

	def bool __eq__(object obj):
		pass


class NodeSet(set):

	def NodeSet filter(str variable, object value):
		pass

	def EdgeSet outE():
		pass


class EdgeSet(set):

	def EdgeSet filter(str variable, object value):
		pass

	def NodeSet outV():
		pass


class Path(list):

	def void __init__(object obj):
		pass


def int len(object obj):
	pass
