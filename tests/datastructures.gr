# Date: 26th April, 2013
# Purpose: To test data structures in Gramola.
# Expectation: Elements in a collection are generic types. As Gramola has no
# introspection, the user should apriori know the element types in a collection.


def int node_list_length(list node_list):
	int l = 0

	for Node n in node_list:
		l = l + 1

	return l


def int node_set_length(set node_set):
	int l = 0

	for Node n in node_set:
		l = l + 1

	return l


def void print_node_dict(dict node_dict):
	for Node n in node_dict:
		print n


def void main():
	Graph g = Graph()
	Node n1 = g.Node({'name': 'Michael', 'age': 30, 'birthday_month' : 9, 'popularity' : 10 })
	Node n2 = g.Node({'name': 'David', 'age': 25,'birthday_month' : 5, 'popularity' : 8})
	Node n3 = g.Node({'name': 'Jack', 'age': 18, 'birthday_month' : 5, 'popularity' : 9})
	Node n4 = g.Node({'name': 'Tom', 'age': 26, 'birthday_month' : 5, 'popularity' : 4})
	Node n5 = g.Node({'name': 'John', 'age': 29, 'birthday_month' : 11, 'popularity' : 3})

	list node_list = [n1, n2, n3, n4, n5]
	set node_set = {n1, n2, n3, n2, n1}
	dict node_dict = {"first": n1, "second": n2, "third": n3, "fourth": n4, "fifth": n5}
