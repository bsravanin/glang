def set<str> customermaillist(Node fbnode_shop, Node googlenode_shop):
 
	#task1 : for birthday gift card
    NodeSet fbns = fbnode_shop.out_edges().filter('type','member').out_nodes().filter('birthday_month', '5')
    NodeSet googlens = googlenode_shop.out_edges().filter('type','member').out_nodes().filter('birthday_month', '5')
    
	set<str> fbns_name = fbns.select('name')
    set<str> googlens_name = googlens.select('name')
	set<str> give_gift_card = union(fbns_name, googlens_name)  # actually I want to union them by name
	
	return give_gift_card
 	
def int num_old_member(Graph fbgraph):
    list<Node> nodelist = fbgraph.get_all_nodes()
    int num = 0
    for Node n in nodelist:
        if n.get_attribute('age') != '20':
            num = num + 1
    return num

def void main():
    Graph fbgraph = load('fbdata1')
    Graph googlegraph = load('googledata1')
	Node fbnode_shop = fbgraph.get_node("name", "shop")
	Node googlenode_shop = googlegraph.get_node("name", "shop")

    set<str> birthday_discount = for_discount(fbnode_shop, googlenode_shop)
	print 'birthday_discount:'
	for str s in birthday_discount: 
	    print s

	# friends who has more than 300 connections on fb
 	NodeSet high_connection_set = fbnode_shop.out_edges().filter('type','fbfriend').out_nodes().filter('popular', 'yes')  
 
	print 'more than 300 facebook connections'
	for Node n in high_connection:
	    print n.get_attribute('name')
	
	#potential customer (The friends of my friends may also like our products )
	NodeSet potential_customer_set = fbnode_shop.out_edges().filter('type', 'fbfriend').out_nodes().out_edges().filter('type','fbfriend').out_nodes()
    
	print 'potential customer'
	for Node n in potential_customer_set:
	    print n.get_attribute('name')

    print 'number of old members'
    int k = num_old_member(fbgraph)
    print k
